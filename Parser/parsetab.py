
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "nonassocIF_NO_ELSEnonassocELSErightASSIGNPLUSASSIGNMINUSASSIGNTIMESASSIGNDIVIDEASSIGNleftEQLTGTLQGQNEleft+-DOTPLUSDOTMINUSleft*/DOTTIMESDOTDIVIDErightUNARY_NEGATIONleftTRANSPOSITIONASSIGN BREAK CONTINUE DIVIDEASSIGN DOTDIVIDE DOTMINUS DOTPLUS DOTTIMES ELSE EQ EYE FLOAT FOR GQ GT ID IF INTEGER LQ LT MINUSASSIGN NE ONES PLUSASSIGN PRINT RETURN STRING TIMESASSIGN TRANSPOSITION WHILE ZEROSprogram : instructions\n        | instructions : instructions instruction instructions : instruction instruction : IF '(' condition ')' instruction %prec IF_NO_ELSEinstruction : IF '(' condition ')' instruction ELSE instructioninstruction : FOR ID ASSIGN expression ':' expression instructioninstruction : WHILE '(' condition ')' instructioninstruction : '{' instructions '}'instruction : one_line_instruction ';'one_line_instruction : left_value ASSIGN expression\n        | left_value PLUSASSIGN expression\n        | left_value MINUSASSIGN expression\n        | left_value TIMESASSIGN expression\n        | left_value DIVIDEASSIGN expressionone_line_instruction : RETURN expressionsone_line_instruction : BREAKone_line_instruction : PRINT expressionsone_line_instruction : CONTINUEexpressions : expressions ',' expression\n        | expressionexpression : left_valueleft_value : IDleft_value : matrix_idmatrix_id : ID '[' indexes ']'indexes : indexes ',' ID\n        | indexes ',' INTEGER\n        | INTEGER\n        | IDcondition : expression EQ expression\n        | expression LT expression\n        | expression GT expression\n        | expression LQ expression\n        | expression GQ expression\n        | expression NE expressionexpression : INTEGERexpression : FLOATexpression : STRINGexpression : matrixmatrix : '[' vectors ']'\n        | '[' matrix_elements ']'vectors : vectors ',' vector\n        | vectorvector : '[' matrix_elements ']' matrix_elements : matrix_elements ',' ID\n        | matrix_elements ',' FLOAT\n        | matrix_elements ',' INTEGER\n        | ID\n        | INTEGER\n        | FLOATexpression : expression '+' expression\n        | expression '-' expression\n        | expression '*' expression\n        | expression '/' expressionexpression : expression DOTPLUS expression\n        | expression DOTMINUS expression\n        | expression DOTTIMES expression\n        | expression DOTDIVIDE expressionexpression : ZEROS '(' expression ')'\n        | ONES '(' expression ')'\n        | EYE '(' expression ')'expression : '-' expression %prec UNARY_NEGATIONexpression : expression TRANSPOSITION"
    
_lr_action_items = {'LQ':([4,13,18,22,23,26,27,44,56,72,79,82,85,86,87,88,89,90,91,92,93,104,110,111,],[-23,-24,-39,-22,-36,-38,-37,-62,-63,97,-41,-40,-51,-55,-56,-52,-57,-58,-53,-54,-25,-61,-60,-59,]),'$end':([0,1,5,6,16,40,73,114,121,124,125,],[-2,-1,-4,0,-3,-10,-9,-8,-5,-7,-6,]),'FOR':([0,1,4,5,11,13,16,18,22,23,26,27,38,40,44,56,73,79,82,85,86,87,88,89,90,91,92,93,95,102,104,110,111,114,121,122,123,124,125,],[2,2,-23,-4,2,-24,-3,-39,-22,-36,-38,-37,2,-10,-62,-63,-9,-41,-40,-51,-55,-56,-52,-57,-58,-53,-54,-25,2,2,-61,-60,-59,-8,-5,2,2,-7,-6,]),';':([4,7,13,14,15,18,20,22,23,26,27,29,31,44,56,66,67,68,69,70,77,79,82,85,86,87,88,89,90,91,92,93,104,110,111,],[-23,-17,-24,-19,40,-39,-18,-22,-36,-38,-37,-21,-16,-62,-63,-14,-15,-12,-11,-13,-20,-41,-40,-51,-55,-56,-52,-57,-58,-53,-54,-25,-61,-60,-59,]),',':([4,13,18,20,22,23,26,27,29,31,44,45,47,48,49,50,51,56,63,64,65,77,78,79,82,85,86,87,88,89,90,91,92,93,104,105,106,107,108,109,110,111,112,113,],[-23,-24,-39,43,-22,-36,-38,-37,-21,43,-62,-43,80,-49,81,-50,-48,-63,-28,94,-29,-20,80,-41,-40,-51,-55,-56,-52,-57,-58,-53,-54,-25,-61,-44,-46,-47,-45,-42,-60,-59,-26,-27,]),'ID':([0,1,2,3,4,5,8,11,13,16,18,21,22,23,24,26,27,30,32,33,34,35,36,37,38,39,40,41,42,43,44,46,52,53,54,55,56,57,58,59,60,61,62,73,79,80,82,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,110,111,114,121,122,123,124,125,],[4,4,17,4,-23,-4,4,4,-24,-3,-39,4,-22,-36,51,-38,-37,65,4,4,4,4,4,4,4,4,-10,4,4,4,-62,51,4,4,4,4,-63,4,4,4,4,4,4,-9,-41,108,-40,-51,-55,-56,-52,-57,-58,-53,-54,-25,112,4,4,4,4,4,4,4,4,4,-61,-60,-59,-8,-5,4,4,-7,-6,]),')':([4,13,18,22,23,26,27,44,56,71,74,76,79,82,83,84,85,86,87,88,89,90,91,92,93,104,110,111,115,116,117,118,119,120,],[-23,-24,-39,-22,-36,-38,-37,-62,-63,95,102,104,-41,-40,110,111,-51,-55,-56,-52,-57,-58,-53,-54,-25,-61,-60,-59,-32,-33,-34,-35,-30,-31,]),'ELSE':([40,73,114,121,124,125,],[-10,-9,-8,123,-7,-6,]),'EQ':([4,13,18,22,23,26,27,44,56,72,79,82,85,86,87,88,89,90,91,92,93,104,110,111,],[-23,-24,-39,-22,-36,-38,-37,-62,-63,100,-41,-40,-51,-55,-56,-52,-57,-58,-53,-54,-25,-61,-60,-59,]),'ONES':([3,8,21,32,33,34,35,36,37,39,41,42,43,52,53,54,55,57,58,59,60,61,62,96,97,98,99,100,101,103,],[25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,]),'LT':([4,13,18,22,23,26,27,44,56,72,79,82,85,86,87,88,89,90,91,92,93,104,110,111,],[-23,-24,-39,-22,-36,-38,-37,-62,-63,101,-41,-40,-51,-55,-56,-52,-57,-58,-53,-54,-25,-61,-60,-59,]),'*':([4,13,18,22,23,26,27,29,44,56,66,67,68,69,70,72,75,76,77,79,82,83,84,85,86,87,88,89,90,91,92,93,104,110,111,115,116,117,118,119,120,122,],[-23,-24,-39,-22,-36,-38,-37,61,-62,-63,61,61,61,61,61,61,61,61,61,-41,-40,61,61,61,61,61,61,-57,-58,-53,-54,-25,-61,-60,-59,61,61,61,61,61,61,61,]),'NE':([4,13,18,22,23,26,27,44,56,72,79,82,85,86,87,88,89,90,91,92,93,104,110,111,],[-23,-24,-39,-22,-36,-38,-37,-62,-63,99,-41,-40,-51,-55,-56,-52,-57,-58,-53,-54,-25,-61,-60,-59,]),'DIVIDEASSIGN':([4,9,13,93,],[-23,33,-24,-25,]),'DOTPLUS':([4,13,18,22,23,26,27,29,44,56,66,67,68,69,70,72,75,76,77,79,82,83,84,85,86,87,88,89,90,91,92,93,104,110,111,115,116,117,118,119,120,122,],[-23,-24,-39,-22,-36,-38,-37,55,-62,-63,55,55,55,55,55,55,55,55,55,-41,-40,55,55,-51,-55,-56,-52,-57,-58,-53,-54,-25,-61,-60,-59,55,55,55,55,55,55,55,]),'DOTTIMES':([4,13,18,22,23,26,27,29,44,56,66,67,68,69,70,72,75,76,77,79,82,83,84,85,86,87,88,89,90,91,92,93,104,110,111,115,116,117,118,119,120,122,],[-23,-24,-39,-22,-36,-38,-37,59,-62,-63,59,59,59,59,59,59,59,59,59,-41,-40,59,59,59,59,59,59,-57,-58,-53,-54,-25,-61,-60,-59,59,59,59,59,59,59,59,]),'MINUSASSIGN':([4,9,13,93,],[-23,36,-24,-25,]),'-':([3,4,8,13,18,21,22,23,26,27,29,32,33,34,35,36,37,39,41,42,43,44,52,53,54,55,56,57,58,59,60,61,62,66,67,68,69,70,72,75,76,77,79,82,83,84,85,86,87,88,89,90,91,92,93,96,97,98,99,100,101,103,104,110,111,115,116,117,118,119,120,122,],[21,-23,21,-24,-39,21,-22,-36,-38,-37,58,21,21,21,21,21,21,21,21,21,21,-62,21,21,21,21,-63,21,21,21,21,21,21,58,58,58,58,58,58,58,58,58,-41,-40,58,58,-51,-55,-56,-52,-57,-58,-53,-54,-25,21,21,21,21,21,21,21,-61,-60,-59,58,58,58,58,58,58,58,]),'STRING':([3,8,21,32,33,34,35,36,37,39,41,42,43,52,53,54,55,57,58,59,60,61,62,96,97,98,99,100,101,103,],[26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,]),'[':([3,4,8,21,24,32,33,34,35,36,37,39,41,42,43,52,53,54,55,57,58,59,60,61,62,81,96,97,98,99,100,101,103,],[24,30,24,24,46,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,46,24,24,24,24,24,24,24,]),'TRANSPOSITION':([4,13,18,22,23,26,27,29,44,56,66,67,68,69,70,72,75,76,77,79,82,83,84,85,86,87,88,89,90,91,92,93,104,110,111,115,116,117,118,119,120,122,],[-23,-24,-39,-22,-36,-38,-37,56,56,-63,56,56,56,56,56,56,56,56,56,-41,-40,56,56,56,56,56,56,56,56,56,56,-25,-61,-60,-59,56,56,56,56,56,56,56,]),'IF':([0,1,4,5,11,13,16,18,22,23,26,27,38,40,44,56,73,79,82,85,86,87,88,89,90,91,92,93,95,102,104,110,111,114,121,122,123,124,125,],[12,12,-23,-4,12,-24,-3,-39,-22,-36,-38,-37,12,-10,-62,-63,-9,-41,-40,-51,-55,-56,-52,-57,-58,-53,-54,-25,12,12,-61,-60,-59,-8,-5,12,12,-7,-6,]),':':([4,13,18,22,23,26,27,44,56,75,79,82,85,86,87,88,89,90,91,92,93,104,110,111,],[-23,-24,-39,-22,-36,-38,-37,-62,-63,103,-41,-40,-51,-55,-56,-52,-57,-58,-53,-54,-25,-61,-60,-59,]),'(':([10,12,19,25,28,],[37,39,42,52,53,]),'ASSIGN':([4,9,13,17,93,],[-23,35,-24,41,-25,]),'PRINT':([0,1,4,5,11,13,16,18,22,23,26,27,38,40,44,56,73,79,82,85,86,87,88,89,90,91,92,93,95,102,104,110,111,114,121,122,123,124,125,],[3,3,-23,-4,3,-24,-3,-39,-22,-36,-38,-37,3,-10,-62,-63,-9,-41,-40,-51,-55,-56,-52,-57,-58,-53,-54,-25,3,3,-61,-60,-59,-8,-5,3,3,-7,-6,]),'TIMESASSIGN':([4,9,13,93,],[-23,32,-24,-25,]),'}':([5,16,38,40,73,114,121,124,125,],[-4,-3,73,-10,-9,-8,-5,-7,-6,]),'BREAK':([0,1,4,5,11,13,16,18,22,23,26,27,38,40,44,56,73,79,82,85,86,87,88,89,90,91,92,93,95,102,104,110,111,114,121,122,123,124,125,],[7,7,-23,-4,7,-24,-3,-39,-22,-36,-38,-37,7,-10,-62,-63,-9,-41,-40,-51,-55,-56,-52,-57,-58,-53,-54,-25,7,7,-61,-60,-59,-8,-5,7,7,-7,-6,]),'CONTINUE':([0,1,4,5,11,13,16,18,22,23,26,27,38,40,44,56,73,79,82,85,86,87,88,89,90,91,92,93,95,102,104,110,111,114,121,122,123,124,125,],[14,14,-23,-4,14,-24,-3,-39,-22,-36,-38,-37,14,-10,-62,-63,-9,-41,-40,-51,-55,-56,-52,-57,-58,-53,-54,-25,14,14,-61,-60,-59,-8,-5,14,14,-7,-6,]),'GT':([4,13,18,22,23,26,27,44,56,72,79,82,85,86,87,88,89,90,91,92,93,104,110,111,],[-23,-24,-39,-22,-36,-38,-37,-62,-63,96,-41,-40,-51,-55,-56,-52,-57,-58,-53,-54,-25,-61,-60,-59,]),'PLUSASSIGN':([4,9,13,93,],[-23,34,-24,-25,]),'INTEGER':([3,8,21,24,30,32,33,34,35,36,37,39,41,42,43,46,52,53,54,55,57,58,59,60,61,62,80,94,96,97,98,99,100,101,103,],[23,23,23,48,63,23,23,23,23,23,23,23,23,23,23,48,23,23,23,23,23,23,23,23,23,23,107,113,23,23,23,23,23,23,23,]),'DOTMINUS':([4,13,18,22,23,26,27,29,44,56,66,67,68,69,70,72,75,76,77,79,82,83,84,85,86,87,88,89,90,91,92,93,104,110,111,115,116,117,118,119,120,122,],[-23,-24,-39,-22,-36,-38,-37,57,-62,-63,57,57,57,57,57,57,57,57,57,-41,-40,57,57,-51,-55,-56,-52,-57,-58,-53,-54,-25,-61,-60,-59,57,57,57,57,57,57,57,]),'WHILE':([0,1,4,5,11,13,16,18,22,23,26,27,38,40,44,56,73,79,82,85,86,87,88,89,90,91,92,93,95,102,104,110,111,114,121,122,123,124,125,],[10,10,-23,-4,10,-24,-3,-39,-22,-36,-38,-37,10,-10,-62,-63,-9,-41,-40,-51,-55,-56,-52,-57,-58,-53,-54,-25,10,10,-61,-60,-59,-8,-5,10,10,-7,-6,]),'{':([0,1,4,5,11,13,16,18,22,23,26,27,38,40,44,56,73,79,82,85,86,87,88,89,90,91,92,93,95,102,104,110,111,114,121,122,123,124,125,],[11,11,-23,-4,11,-24,-3,-39,-22,-36,-38,-37,11,-10,-62,-63,-9,-41,-40,-51,-55,-56,-52,-57,-58,-53,-54,-25,11,11,-61,-60,-59,-8,-5,11,11,-7,-6,]),'DOTDIVIDE':([4,13,18,22,23,26,27,29,44,56,66,67,68,69,70,72,75,76,77,79,82,83,84,85,86,87,88,89,90,91,92,93,104,110,111,115,116,117,118,119,120,122,],[-23,-24,-39,-22,-36,-38,-37,60,-62,-63,60,60,60,60,60,60,60,60,60,-41,-40,60,60,60,60,60,60,-57,-58,-53,-54,-25,-61,-60,-59,60,60,60,60,60,60,60,]),'GQ':([4,13,18,22,23,26,27,44,56,72,79,82,85,86,87,88,89,90,91,92,93,104,110,111,],[-23,-24,-39,-22,-36,-38,-37,-62,-63,98,-41,-40,-51,-55,-56,-52,-57,-58,-53,-54,-25,-61,-60,-59,]),'+':([4,13,18,22,23,26,27,29,44,56,66,67,68,69,70,72,75,76,77,79,82,83,84,85,86,87,88,89,90,91,92,93,104,110,111,115,116,117,118,119,120,122,],[-23,-24,-39,-22,-36,-38,-37,54,-62,-63,54,54,54,54,54,54,54,54,54,-41,-40,54,54,-51,-55,-56,-52,-57,-58,-53,-54,-25,-61,-60,-59,54,54,54,54,54,54,54,]),'RETURN':([0,1,4,5,11,13,16,18,22,23,26,27,38,40,44,56,73,79,82,85,86,87,88,89,90,91,92,93,95,102,104,110,111,114,121,122,123,124,125,],[8,8,-23,-4,8,-24,-3,-39,-22,-36,-38,-37,8,-10,-62,-63,-9,-41,-40,-51,-55,-56,-52,-57,-58,-53,-54,-25,8,8,-61,-60,-59,-8,-5,8,8,-7,-6,]),'FLOAT':([3,8,21,24,32,33,34,35,36,37,39,41,42,43,46,52,53,54,55,57,58,59,60,61,62,80,96,97,98,99,100,101,103,],[27,27,27,50,27,27,27,27,27,27,27,27,27,27,50,27,27,27,27,27,27,27,27,27,27,106,27,27,27,27,27,27,27,]),'ZEROS':([3,8,21,32,33,34,35,36,37,39,41,42,43,52,53,54,55,57,58,59,60,61,62,96,97,98,99,100,101,103,],[28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,]),']':([45,47,48,49,50,51,63,64,65,78,105,106,107,108,109,112,113,],[-43,79,-49,82,-50,-48,-28,93,-29,105,-44,-46,-47,-45,-42,-26,-27,]),'EYE':([3,8,21,32,33,34,35,36,37,39,41,42,43,52,53,54,55,57,58,59,60,61,62,96,97,98,99,100,101,103,],[19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,]),'/':([4,13,18,22,23,26,27,29,44,56,66,67,68,69,70,72,75,76,77,79,82,83,84,85,86,87,88,89,90,91,92,93,104,110,111,115,116,117,118,119,120,122,],[-23,-24,-39,-22,-36,-38,-37,62,-62,-63,62,62,62,62,62,62,62,62,62,-41,-40,62,62,62,62,62,62,-57,-58,-53,-54,-25,-61,-60,-59,62,62,62,62,62,62,62,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'vector':([24,81,],[45,109,]),'one_line_instruction':([0,1,11,38,95,102,122,123,],[15,15,15,15,15,15,15,15,]),'vectors':([24,],[49,]),'matrix_elements':([24,46,],[47,78,]),'indexes':([30,],[64,]),'instructions':([0,11,],[1,38,]),'matrix':([3,8,21,32,33,34,35,36,37,39,41,42,43,52,53,54,55,57,58,59,60,61,62,96,97,98,99,100,101,103,],[18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,]),'matrix_id':([0,1,3,8,11,21,32,33,34,35,36,37,38,39,41,42,43,52,53,54,55,57,58,59,60,61,62,95,96,97,98,99,100,101,102,103,122,123,],[13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,]),'instruction':([0,1,11,38,95,102,122,123,],[5,16,5,16,114,121,124,125,]),'expressions':([3,8,],[20,31,]),'program':([0,],[6,]),'condition':([37,39,],[71,74,]),'left_value':([0,1,3,8,11,21,32,33,34,35,36,37,38,39,41,42,43,52,53,54,55,57,58,59,60,61,62,95,96,97,98,99,100,101,102,103,122,123,],[9,9,22,22,9,22,22,22,22,22,22,22,9,22,22,22,22,22,22,22,22,22,22,22,22,22,22,9,22,22,22,22,22,22,9,22,9,9,]),'expression':([3,8,21,32,33,34,35,36,37,39,41,42,43,52,53,54,55,57,58,59,60,61,62,96,97,98,99,100,101,103,],[29,29,44,66,67,68,69,70,72,72,75,76,77,83,84,85,86,87,88,89,90,91,92,115,116,117,118,119,120,122,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> instructions','program',1,'p_program','Mparser.py',33),
  ('program -> <empty>','program',0,'p_program','Mparser.py',34),
  ('instructions -> instructions instruction','instructions',2,'p_instructions_1','Mparser.py',42),
  ('instructions -> instruction','instructions',1,'p_instructions_2','Mparser.py',48),
  ('instruction -> IF ( condition ) instruction','instruction',5,'p_instruction_if','Mparser.py',53),
  ('instruction -> IF ( condition ) instruction ELSE instruction','instruction',7,'p_instruction_if_else','Mparser.py',58),
  ('instruction -> FOR ID ASSIGN expression : expression instruction','instruction',7,'p_instruction_for','Mparser.py',63),
  ('instruction -> WHILE ( condition ) instruction','instruction',5,'p_instruction_while','Mparser.py',68),
  ('instruction -> { instructions }','instruction',3,'p_instruction_block','Mparser.py',73),
  ('instruction -> one_line_instruction ;','instruction',2,'p_instruction_semicolon','Mparser.py',78),
  ('one_line_instruction -> left_value ASSIGN expression','one_line_instruction',3,'p_assign','Mparser.py',83),
  ('one_line_instruction -> left_value PLUSASSIGN expression','one_line_instruction',3,'p_assign','Mparser.py',84),
  ('one_line_instruction -> left_value MINUSASSIGN expression','one_line_instruction',3,'p_assign','Mparser.py',85),
  ('one_line_instruction -> left_value TIMESASSIGN expression','one_line_instruction',3,'p_assign','Mparser.py',86),
  ('one_line_instruction -> left_value DIVIDEASSIGN expression','one_line_instruction',3,'p_assign','Mparser.py',87),
  ('one_line_instruction -> RETURN expressions','one_line_instruction',2,'p_instruction_return','Mparser.py',92),
  ('one_line_instruction -> BREAK','one_line_instruction',1,'p_instruction_break','Mparser.py',97),
  ('one_line_instruction -> PRINT expressions','one_line_instruction',2,'p_instruction_print','Mparser.py',102),
  ('one_line_instruction -> CONTINUE','one_line_instruction',1,'p_instruction_continue','Mparser.py',107),
  ('expressions -> expressions , expression','expressions',3,'p_expressions','Mparser.py',112),
  ('expressions -> expression','expressions',1,'p_expressions','Mparser.py',113),
  ('expression -> left_value','expression',1,'p_left_value_expr','Mparser.py',122),
  ('left_value -> ID','left_value',1,'p_left_value_id','Mparser.py',127),
  ('left_value -> matrix_id','left_value',1,'p_left_value_matrix','Mparser.py',132),
  ('matrix_id -> ID [ indexes ]','matrix_id',4,'p_matrix_id','Mparser.py',137),
  ('indexes -> indexes , ID','indexes',3,'p_indexes','Mparser.py',142),
  ('indexes -> indexes , INTEGER','indexes',3,'p_indexes','Mparser.py',143),
  ('indexes -> INTEGER','indexes',1,'p_indexes','Mparser.py',144),
  ('indexes -> ID','indexes',1,'p_indexes','Mparser.py',145),
  ('condition -> expression EQ expression','condition',3,'p_condition','Mparser.py',156),
  ('condition -> expression LT expression','condition',3,'p_condition','Mparser.py',157),
  ('condition -> expression GT expression','condition',3,'p_condition','Mparser.py',158),
  ('condition -> expression LQ expression','condition',3,'p_condition','Mparser.py',159),
  ('condition -> expression GQ expression','condition',3,'p_condition','Mparser.py',160),
  ('condition -> expression NE expression','condition',3,'p_condition','Mparser.py',161),
  ('expression -> INTEGER','expression',1,'p_expression_int','Mparser.py',166),
  ('expression -> FLOAT','expression',1,'p_expression_float','Mparser.py',171),
  ('expression -> STRING','expression',1,'p_expression_string','Mparser.py',176),
  ('expression -> matrix','expression',1,'p_expression_matrix','Mparser.py',181),
  ('matrix -> [ vectors ]','matrix',3,'p_matrix','Mparser.py',186),
  ('matrix -> [ matrix_elements ]','matrix',3,'p_matrix','Mparser.py',187),
  ('vectors -> vectors , vector','vectors',3,'p_vectors','Mparser.py',195),
  ('vectors -> vector','vectors',1,'p_vectors','Mparser.py',196),
  ('vector -> [ matrix_elements ]','vector',3,'p_vector','Mparser.py',205),
  ('matrix_elements -> matrix_elements , ID','matrix_elements',3,'p_matrix_elements','Mparser.py',210),
  ('matrix_elements -> matrix_elements , FLOAT','matrix_elements',3,'p_matrix_elements','Mparser.py',211),
  ('matrix_elements -> matrix_elements , INTEGER','matrix_elements',3,'p_matrix_elements','Mparser.py',212),
  ('matrix_elements -> ID','matrix_elements',1,'p_matrix_elements','Mparser.py',213),
  ('matrix_elements -> INTEGER','matrix_elements',1,'p_matrix_elements','Mparser.py',214),
  ('matrix_elements -> FLOAT','matrix_elements',1,'p_matrix_elements','Mparser.py',215),
  ('expression -> expression + expression','expression',3,'p_operators','Mparser.py',227),
  ('expression -> expression - expression','expression',3,'p_operators','Mparser.py',228),
  ('expression -> expression * expression','expression',3,'p_operators','Mparser.py',229),
  ('expression -> expression / expression','expression',3,'p_operators','Mparser.py',230),
  ('expression -> expression DOTPLUS expression','expression',3,'p_dot_operators','Mparser.py',235),
  ('expression -> expression DOTMINUS expression','expression',3,'p_dot_operators','Mparser.py',236),
  ('expression -> expression DOTTIMES expression','expression',3,'p_dot_operators','Mparser.py',237),
  ('expression -> expression DOTDIVIDE expression','expression',3,'p_dot_operators','Mparser.py',238),
  ('expression -> ZEROS ( expression )','expression',4,'p_array_functions','Mparser.py',243),
  ('expression -> ONES ( expression )','expression',4,'p_array_functions','Mparser.py',244),
  ('expression -> EYE ( expression )','expression',4,'p_array_functions','Mparser.py',245),
  ('expression -> - expression','expression',2,'p_unary_negation','Mparser.py',250),
  ('expression -> expression TRANSPOSITION','expression',2,'p_transposition','Mparser.py',255),
]
